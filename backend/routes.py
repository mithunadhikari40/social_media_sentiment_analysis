import os
import shutil
import uuid
from typing import List
from fastapi import APIRouter, Depends, File, UploadFile, HTTPException, status
from fastapi.responses import FileResponse
from sqlalchemy.orm import Session
import pandas as pd

from . import  auth, schemas, database, models

router = APIRouter()

# Define base directory relative to this file's location
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
UPLOAD_DIR = os.path.join(BASE_DIR, "data", "uploads")
RESULTS_DIR = os.path.join(BASE_DIR, "results")

# Ensure directories exist
os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(RESULTS_DIR, exist_ok=True)

@router.post("/analyze/", status_code=status.HTTP_201_CREATED, response_model=schemas.Report)
async def analyze_data(
    file: UploadFile = File(...),
    db: Session = Depends(database.get_db),
    current_user: schemas.User = Depends(auth.get_current_user)
):
    if not file.filename.endswith('.csv'):
        raise HTTPException(status_code=400, detail="Invalid file type. Please upload a CSV file.")

    unique_id = uuid.uuid4().hex
    upload_path = os.path.join(UPLOAD_DIR, f"{unique_id}_{file.filename}")
    pdf_filename = f"report_{unique_id}.pdf"
    pdf_path = os.path.join(RESULTS_DIR, pdf_filename)

    from . import pdf_generator

    try:
        with open(upload_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        df = pd.read_csv(upload_path)
        if 'text' not in df.columns:
            raise HTTPException(status_code=400, detail="CSV file must contain a 'text' column.")

        from . import  analysis
        df_results, wordcloud_paths = analysis.run_analysis(df)
        pdf_generator.create_pdf_report(df_results, wordcloud_paths, pdf_path)

        # Save report metadata to the database
        db_report = models.Report(filename=pdf_filename, user_id=current_user.id)
        db.add(db_report)
        db.commit()
        db.refresh(db_report)

        return db_report

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"An unexpected error occurred: {str(e)}")
    finally:
        if os.path.exists(upload_path):
            os.remove(upload_path)

@router.get("/reports/", response_model=List[schemas.Report])
def list_user_reports(
    db: Session = Depends(database.get_db),
    current_user: schemas.User = Depends(auth.get_current_user)
):
    """Retrieves a list of all reports generated by the current user."""
    reports = db.query(models.Report).filter(models.Report.user_id == current_user.id).all()
    return reports

@router.get("/reports/{report_id}", response_class=FileResponse)
def download_report(
    report_id: int,
    db: Session = Depends(database.get_db),
    current_user: schemas.User = Depends(auth.get_current_user)
):
    """Downloads a specific report by its ID."""
    db_report = db.query(models.Report).filter(models.Report.id == report_id).first()

    if not db_report:
        raise HTTPException(status_code=404, detail="Report not found.")

    if db_report.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to access this report.")

    file_path = os.path.join(RESULTS_DIR, db_report.filename)

    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="Report file not found on server.")

    return FileResponse(
        path=file_path,
        filename=f"report_{db_report.id}.pdf",
        media_type="application/pdf"
    )
